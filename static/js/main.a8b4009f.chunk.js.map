{"version":3,"sources":["utils/handleNotifications.ts","serviceWorkerRegistration.ts","hooks/useServiceWorker.tsx","components/ServiceWorkerProvider/contect.ts","components/ServiceWorkerProvider/ServiceWorkerProvider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["processNotification","title","options","Notification","permission","console","log","navigator","serviceWorker","getRegistration","then","reg","showNotification","requestPermission","status","isLocalhost","Boolean","window","location","hostname","match","register","config","URL","process","href","origin","addEventListener","swUrl","fetch","headers","response","contentType","get","indexOf","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","useServiceWorker","timeout","React","useState","updateAvailable","setUpdateAvailable","setRegistration","useEffect","interval","setInterval","update","clearInterval","registered","updated","message","ServiceWorkerContext","createContext","ServiceWorkerProvider","children","context","Provider","value","TodoListComponent","lazy","App","className","fallback","LinearProgress","Button","onClick","body","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8b4009f.chunk.js","sourcesContent":["const processNotification = (title: string, options: NotificationOptions) => {\n  if (Notification.permission === \"granted\") {\n    console.log(\"before callback\");\n    navigator.serviceWorker.getRegistration().then(function (reg) {\n      console.log(\"handle notification\");\n      reg?.showNotification(title, options);\n    });\n  } else if (Notification.permission === \"denied\") {\n    /* the user has previously denied push. Can't reprompt. */\n  } else {\n    Notification.requestPermission(function (status) {\n      console.log(\"Notification permission status:\", status);\n    });\n  }\n};\n\nexport default processNotification;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { register, unregister } from \"../serviceWorkerRegistration\";\n\nconst useServiceWorker = ({ timeout = 1000 }) => {\n  const [updateAvailable, setUpdateAvailable] = React.useState<boolean>(false);\n  const [registration, setRegistration] = React.useState<any>(null);\n  React.useEffect(() => {\n    const interval: number = window.setInterval(() => {\n      if (registration) {\n        registration.update();\n      }\n    }, timeout);\n    return () => clearInterval(interval);\n  }, [registration]);\n\n  const registered = (registration: any) => setRegistration(registration);\n  const updated = () => setUpdateAvailable(true);\n\n  React.useEffect(() => {\n    register({ onSuccess: registered, onUpdate: updated });\n    return () => unregister();\n  }, []);\n\n  return { updateAvailable };\n};\n\nexport default useServiceWorker;\n","import { createContext } from \"react\";\n\nimport { IServiceWorkerContext } from \"./types\";\n\nexport const ServiceWorkerContext = createContext<IServiceWorkerContext>({\n  updateAvailable: false,\n});\n","import React from \"react\";\nimport useServiceWorker from \"../../hooks/useServiceWorker\";\nimport { ServiceWorkerContext } from \"./contect\";\n\nconst ServiceWorkerProvider: React.FC = ({ children }) => {\n  const context = useServiceWorker({ timeout: 1000 });\n  return (\n    <ServiceWorkerContext.Provider value={context}>\n      {children}\n    </ServiceWorkerContext.Provider>\n  );\n};\n\nexport default ServiceWorkerProvider;\n","import { Button, LinearProgress } from \"@material-ui/core\";\nimport React, { Suspense, useEffect } from \"react\";\nimport \"./App.css\";\nimport ServiceWorkerProvider from \"./components/ServiceWorkerProvider/ServiceWorkerProvider\";\nimport processNotification from \"./utils/handleNotifications\";\n\nconst TodoListComponent = React.lazy(() => import(\"./views/TodoList/TodoList\"));\n\nconst App: React.FC = () => {\n  const buttonClick = () => {\n    processNotification(\"Notification Success\", {\n      body: \"Here is a notification body\",\n    });\n  };\n  return (\n    <div className=\"App\">\n      <ServiceWorkerProvider>\n        <Suspense fallback={<LinearProgress />}>\n          <TodoListComponent />\n          <Button onClick={buttonClick}>Handle Notification</Button>\n        </Suspense>\n      </ServiceWorkerProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n\n// serviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}