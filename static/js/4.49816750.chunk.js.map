{"version":3,"sources":["components/Header.tsx","views/TodoList/TodoList.tsx"],"names":["Header","title","description","Helmet","name","content","useStyles","makeStyles","theme","createStyles","doneTodo","textDecoration","listItem","cursor","root","minWidth","width","margin","background","grey","TodoList","classes","useState","todo","setTodo","todos","setTodos","error","setError","Card","className","CardHeader","CardContent","onSubmit","e","preventDefault","trim","length","preValue","id","Date","now","toString","isDone","TextField","variant","label","fullWidth","value","onChange","target","helperText","List","map","t","ListItem","onClick","selectedTodo","index","findIndex","splice","onTodoClick","ListItemText","primary","classnames","ListItemSecondaryAction","IconButton","edge","aria-label","onDelete","Divider"],"mappings":"iTAiBeA,EATuB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAC9C,OACE,eAACC,EAAA,EAAD,WACE,gCAAQF,MACLC,GAAe,sBAAME,KAAK,cAAcC,QAASH,Q,kCCYpDI,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,SAAU,CACRC,eAAgB,gBAElBC,SAAU,CACRC,OAAQ,WAEVC,KAAM,CACJC,SAAU,IACVC,MAAO,MACPC,OAAQ,aACRC,WAAYC,IAAK,WAiGRC,UAtF2B,WACxC,IAAMC,EAAUf,IAChB,EAAwBgB,mBAAiB,IAAzC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAqB,IAA/C,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA0BJ,mBAAwB,MAAlD,mBAAOK,EAAP,KAAcC,EAAd,KA8BA,OACE,qCACE,cAAC,EAAD,CACE3B,MAAM,YACNC,YAAY,6CAEd,eAAC2B,EAAA,EAAD,CAAMC,UAAWT,EAAQP,KAAzB,UACE,cAACiB,EAAA,EAAD,CAAY9B,MAAM,gBAClB,eAAC+B,EAAA,EAAD,WACE,sBAAMC,SArCG,SAACC,GAChBA,EAAEC,iBACFP,EAAS,MACkB,IAAvBL,EAAKa,OAAOC,QAIhBX,GAAS,SAACY,GAAD,4BACJA,GADI,CAEP,CAAEC,GAAIC,KAAKC,MAAMC,WAAYnB,KAAMA,EAAMoB,QAAQ,QAEnDnB,EAAQ,KAPNI,EAAS,yBAiCL,SACE,cAACgB,EAAA,EAAD,CACEC,QAAQ,WACRC,MAAM,OACNC,WAAS,EACTC,MAAOzB,EACP0B,SAAU,SAACf,GAAD,OAAOV,EAAQU,EAAEgB,OAAOF,QAClCG,WAAcxB,GAAgB,GAC9BA,QAASA,MAGb,cAACyB,EAAA,EAAD,UACG3B,EAAM4B,KAAI,SAACC,GAAD,OACT,qCACE,eAACC,EAAA,EAAD,CACEC,QAAS,kBAtCL,SAACC,GACnB,IAAMC,EAAQjC,EAAMkC,WAAU,SAACpC,GAAD,OAAUkC,EAAalB,KAAOhB,EAAKgB,MACjEd,EAAMmC,OAAOF,EAAO,EAApB,2BACKD,GADL,IAEEd,QAASc,EAAad,UAExBjB,EAAS,YAAID,IAgCgBoC,CAAYP,IAE3BxB,UAAWT,EAAQT,SAHrB,UAKE,cAACkD,EAAA,EAAD,CACEC,QAAST,EAAE/B,KACXO,UAAWkC,IAAW,eAAG3C,EAAQX,SAAW4C,EAAEX,WAEhD,cAACsB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEC,KAAK,MACLC,aAAW,SACXZ,QAAS,kBAzCZ,SAACC,GAChB,IAAMC,EAAQjC,EAAMkC,WAAU,SAACpC,GAAD,OAAUkC,EAAalB,KAAOhB,EAAKgB,MACjEd,EAAMmC,OAAOF,EAAO,GACpBhC,EAAS,YAAID,IAsCoB4C,CAASf,IAH1B,SAKE,cAAC,IAAD,UAbCA,EAAEf,IAiBT,cAAC+B,EAAA,EAAD","file":"static/js/4.49816750.chunk.js","sourcesContent":["import React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nexport interface HeaderProps {\n  title: string;\n  description?: string;\n}\n\nconst Header: React.FC<HeaderProps> = ({ title, description }) => {\n  return (\n    <Helmet>\n      <title>{title}</title>\n      {!!description && <meta name=\"description\" content={description} />}\n    </Helmet>\n  );\n};\n\nexport default Header;\n","import {\n  Card,\n  CardContent,\n  CardHeader,\n  createStyles,\n  Divider,\n  IconButton,\n  List,\n  ListItem,\n  ListItemSecondaryAction,\n  ListItemText,\n  makeStyles,\n  TextField,\n  Theme,\n} from \"@material-ui/core\";\nimport { grey } from \"@material-ui/core/colors\";\nimport React, { useState } from \"react\";\nimport Header from \"../../components/Header\";\nimport classnames from \"classnames\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nexport interface TodoListProps {}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    doneTodo: {\n      textDecoration: \"line-through\",\n    },\n    listItem: {\n      cursor: \"pointer\",\n    },\n    root: {\n      minWidth: 345,\n      width: \"30%\",\n      margin: \"10rem auto\",\n      background: grey[200],\n    },\n  })\n);\n\ntype TodoType = {\n  id: string;\n  todo: string;\n  isDone: boolean;\n};\n\nconst TodoList: React.FC<TodoListProps> = () => {\n  const classes = useStyles();\n  const [todo, setTodo] = useState<string>(\"\");\n  const [todos, setTodos] = useState<TodoType[]>([]);\n  const [error, setError] = useState<string | null>(null);\n\n  const addTodos = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setError(null);\n    if (todo.trim().length === 0) {\n      setError(\"Todo cannot be blank\");\n      return;\n    }\n    setTodos((preValue) => [\n      ...preValue,\n      { id: Date.now().toString(), todo: todo, isDone: false },\n    ]);\n    setTodo(\"\");\n  };\n\n  const onTodoClick = (selectedTodo: TodoType) => {\n    const index = todos.findIndex((todo) => selectedTodo.id === todo.id);\n    todos.splice(index, 1, {\n      ...selectedTodo,\n      isDone: !selectedTodo.isDone,\n    });\n    setTodos([...todos]);\n  };\n\n  const onDelete = (selectedTodo: TodoType) => {\n    const index = todos.findIndex((todo) => selectedTodo.id === todo.id);\n    todos.splice(index, 1);\n    setTodos([...todos]);\n  };\n  return (\n    <>\n      <Header\n        title=\"Todo List\"\n        description=\"Create todo and save it in local storage\"\n      />\n      <Card className={classes.root}>\n        <CardHeader title=\"Create Todo\" />\n        <CardContent>\n          <form onSubmit={addTodos}>\n            <TextField\n              variant=\"outlined\"\n              label=\"Todo\"\n              fullWidth\n              value={todo}\n              onChange={(e) => setTodo(e.target.value)}\n              helperText={!!error ? error : \"\"}\n              error={!!error}\n            />\n          </form>\n          <List>\n            {todos.map((t) => (\n              <>\n                <ListItem\n                  onClick={() => onTodoClick(t)}\n                  key={t.id}\n                  className={classes.listItem}\n                >\n                  <ListItemText\n                    primary={t.todo}\n                    className={classnames({ [classes.doneTodo]: t.isDone })}\n                  />\n                  <ListItemSecondaryAction>\n                    <IconButton\n                      edge=\"end\"\n                      aria-label=\"delete\"\n                      onClick={() => onDelete(t)}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n                <Divider />\n              </>\n            ))}\n          </List>\n        </CardContent>\n      </Card>\n    </>\n  );\n};\n\nexport default TodoList;\n"],"sourceRoot":""}