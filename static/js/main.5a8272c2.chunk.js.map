{"version":3,"sources":["utils/handleNotifications.ts","components/ServiceWorkerProvider/contect.ts","components/HandleUpdate.tsx","serviceWorkerRegistration.ts","hooks/useServiceWorker.tsx","components/ServiceWorkerProvider/ServiceWorkerProvider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["processNotification","title","options","Notification","permission","console","log","navigator","serviceWorker","getRegistration","then","reg","showNotification","requestPermission","status","ServiceWorkerContext","createContext","updateAvailable","HandleUpdate","useContext","useState","showDialog","setShowDialog","useEffect","handleClose","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onClick","color","window","location","reload","autoFocus","isLocalhost","Boolean","hostname","match","register","config","URL","process","href","origin","addEventListener","swUrl","fetch","headers","response","contentType","get","indexOf","ready","registration","unregister","registerValidSW","catch","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","useServiceWorker","timeout","React","setUpdateAvailable","setRegistration","interval","setInterval","update","clearInterval","registered","updated","message","ServiceWorkerProvider","children","context","Provider","value","TodoListComponent","lazy","App","className","fallback","LinearProgress","body","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a8272c2.chunk.js","sourcesContent":["const processNotification = (title: string, options: NotificationOptions) => {\n  if (Notification.permission === \"granted\") {\n    console.log(\"before callback\");\n    navigator.serviceWorker.getRegistration().then(function (reg) {\n      console.log(\"handle notification\");\n      reg?.showNotification(title, options);\n    });\n  } else if (Notification.permission === \"denied\") {\n    /* the user has previously denied push. Can't reprompt. */\n  } else {\n    Notification.requestPermission(function (status) {\n      console.log(\"Notification permission status:\", status);\n    });\n  }\n};\n\nexport default processNotification;\n","import { createContext } from \"react\";\n\nimport { IServiceWorkerContext } from \"./types\";\n\nexport const ServiceWorkerContext = createContext<IServiceWorkerContext>({\n  updateAvailable: false,\n});\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from \"@material-ui/core\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { ServiceWorkerContext } from \"./ServiceWorkerProvider/contect\";\n\nconst HandleUpdate: React.FC = () => {\n  const { updateAvailable } = useContext(ServiceWorkerContext);\n  const [showDialog, setShowDialog] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (showDialog) {\n      setShowDialog(true);\n    }\n  }, [updateAvailable]);\n\n  const handleClose = () => {\n    setShowDialog(false);\n  };\n\n  const handleLoad = () => {\n    window.location.reload();\n    setShowDialog(true);\n  };\n\n  return (\n    <Dialog\n      open={showDialog}\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {\"Use Google's location service?\"}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          Let Google help apps determine location. This means sending anonymous\n          location data to Google, even when no apps are running.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"secondary\">\n          Disagree\n        </Button>\n        <Button onClick={handleLoad} color=\"primary\" autoFocus>\n          Agree\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default HandleUpdate;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { register, unregister } from \"../serviceWorkerRegistration\";\n\nconst useServiceWorker = ({ timeout = 1000 }) => {\n  const [updateAvailable, setUpdateAvailable] = React.useState<boolean>(false);\n  const [registration, setRegistration] = React.useState<any>(null);\n  React.useEffect(() => {\n    const interval: number = window.setInterval(() => {\n      if (registration) {\n        registration.update();\n      }\n    }, timeout);\n    return () => clearInterval(interval);\n  }, [registration]);\n\n  const registered = (registration: any) => setRegistration(registration);\n  const updated = () => setUpdateAvailable(true);\n\n  React.useEffect(() => {\n    register({ onSuccess: registered, onUpdate: updated });\n    return () => unregister();\n  }, []);\n\n  return { updateAvailable };\n};\n\nexport default useServiceWorker;\n","import React from \"react\";\nimport useServiceWorker from \"../../hooks/useServiceWorker\";\nimport { ServiceWorkerContext } from \"./contect\";\n\nconst ServiceWorkerProvider: React.FC = ({ children }) => {\n  const context = useServiceWorker({ timeout: 1000 });\n  return (\n    <ServiceWorkerContext.Provider value={context}>\n      {children}\n    </ServiceWorkerContext.Provider>\n  );\n};\n\nexport default ServiceWorkerProvider;\n","import { Button, LinearProgress } from \"@material-ui/core\";\nimport React, { Suspense, useEffect } from \"react\";\nimport \"./App.css\";\nimport HandleUpdate from \"./components/HandleUpdate\";\nimport ServiceWorkerProvider from \"./components/ServiceWorkerProvider/ServiceWorkerProvider\";\nimport processNotification from \"./utils/handleNotifications\";\n\nconst TodoListComponent = React.lazy(() => import(\"./views/TodoList/TodoList\"));\n\nconst App: React.FC = () => {\n  const buttonClick = () => {\n    processNotification(\"Notification Success\", {\n      body: \"Here is a notification body\",\n    });\n  };\n  return (\n    <div className=\"App\">\n      <ServiceWorkerProvider>\n        <Suspense fallback={<LinearProgress />}>\n          <TodoListComponent />\n          <HandleUpdate />\n          <Button onClick={buttonClick}>Notify</Button>\n        </Suspense>\n      </ServiceWorkerProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// serviceWorkerRegistration.register();\n\nreportWebVitals();\n"],"sourceRoot":""}