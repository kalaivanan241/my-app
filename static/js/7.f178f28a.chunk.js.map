{"version":3,"sources":["configs/db.ts","configs/firebase.ts","hooks/useFirebaseServices.tsx","components/Header.tsx","utils/handleNotifications.ts","views/TodoList/TodoList.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","useFirebaseServices","documentName","useState","loading","setLoading","a","collection","limit","get","todos","data","docs","map","doc","id","todoObj","add","set","delete","getData","addData","updateData","deleteData","Header","title","description","Helmet","name","content","processNotification","options","Notification","permission","navigator","serviceWorker","getRegistration","then","reg","showNotification","requestPermission","status","console","log","useStyles","makeStyles","theme","createStyles","doneTodo","textDecoration","listItem","cursor","root","minWidth","width","margin","background","grey","marginTop","listStyle","maxHeight","overflow","TodoList","classes","todo","setTodo","setTodos","error","setError","getTodos","todosList","useEffect","Card","className","CardHeader","CardContent","onSubmit","e","preventDefault","trim","length","Date","now","toString","isDone","preValue","body","TextField","variant","label","fullWidth","value","onChange","target","helperText","CircularProgress","List","t","Fragment","ListItem","onClick","selectedTodo","index","findIndex","splice","onTodoClick","ListItemText","primary","classnames","ListItemSecondaryAction","IconButton","edge","aria-label","onDelete","Divider"],"mappings":"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","file":"static/js/7.f178f28a.chunk.js","sourcesContent":["import firebase from \"firebase\";\nimport { firebaseConfig } from \"./firebase\";\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const db = firebase?.firestore();\n","export const firebaseConfig = {\n  apiKey: \"AIzaSyC-tzfeKC1QSFSZbyAcgNxw7nNa5Bqm0Zs\",\n  authDomain: \"my-pwa-ab0ee.firebaseapp.com\",\n  projectId: \"my-pwa-ab0ee\",\n  storageBucket: \"my-pwa-ab0ee.appspot.com\",\n  messagingSenderId: \"726616032493\",\n  appId: \"1:726616032493:web:789aec950bde86366ab8e4\",\n  measurementId: \"G-4V4DXTD4MX\",\n};\n","import React, { useState } from \"react\";\nimport { db } from \"../configs/db\";\n\nexport interface DocumentID {\n  id: string;\n}\n\nfunction useFirebaseServices<T extends DocumentID>(documentName: string) {\n  const [loading, setLoading] = useState<boolean>(false);\n  async function getData(): Promise<T[]> {\n    setLoading(true);\n    const todos = await db.collection(documentName).limit(50).get();\n    const data: T[] = todos.docs.map((doc) => ({\n      ...(doc.data() as T),\n      id: doc.id,\n    }));\n    setLoading(false);\n    return data;\n  }\n\n  async function addData(todoObj: T): Promise<T> {\n    setLoading(true);\n    const data: any = await db.collection(documentName).add({\n      ...todoObj,\n    });\n    setLoading(false);\n    return { ...data, id: data.id } as T;\n  }\n\n  async function updateData(todoObj: T) {\n    setLoading(true);\n    await db\n      .collection(documentName)\n      .doc(todoObj.id)\n      .set({\n        ...todoObj,\n      });\n    setLoading(false);\n  }\n\n  async function deleteData(todoObj: T) {\n    setLoading(true);\n    await db.collection(documentName).doc(todoObj.id).delete();\n    setLoading(false);\n  }\n\n  return { getData, addData, updateData, deleteData, loading };\n}\n\nexport default useFirebaseServices;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nexport interface HeaderProps {\n  title: string;\n  description?: string;\n}\n\nconst Header: React.FC<HeaderProps> = ({ title, description }) => {\n  return (\n    <Helmet>\n      <title>{title}</title>\n      {!!description && <meta name=\"description\" content={description} />}\n    </Helmet>\n  );\n};\n\nexport default Header;\n","const processNotification = (title: string, options: NotificationOptions) => {\n  if (Notification.permission === \"granted\") {\n    navigator.serviceWorker.getRegistration().then(function (reg) {\n      reg?.showNotification(title, options);\n    });\n  } else if (Notification.permission === \"denied\") {\n    /* the user has previously denied push. Can't reprompt. */\n  } else {\n    Notification.requestPermission(function (status) {\n      console.log(\"Notification permission status:\", status);\n    });\n  }\n};\n\nexport default processNotification;\n","import {\n  Card,\n  CardContent,\n  CardHeader,\n  CircularProgress,\n  createStyles,\n  Divider,\n  IconButton,\n  List,\n  ListItem,\n  ListItemSecondaryAction,\n  ListItemText,\n  makeStyles,\n  TextField,\n  Theme,\n} from \"@material-ui/core\";\nimport { grey } from \"@material-ui/core/colors\";\nimport React, { useEffect, useState } from \"react\";\nimport Header from \"../../components/Header\";\nimport classnames from \"classnames\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport processNotification from \"../../utils/handleNotifications\";\nimport { db } from \"../../configs/db\";\nimport { TodoType } from \"./types\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport useFirebaseServices from \"./../../hooks/useFirebaseServices\";\n\nexport interface TodoListProps {}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    doneTodo: {\n      textDecoration: \"line-through\",\n    },\n    listItem: {\n      cursor: \"pointer\",\n    },\n    root: {\n      minWidth: 345,\n      width: \"30%\",\n      margin: \"auto\",\n      background: grey[200],\n      marginTop: \"2rem\",\n    },\n    listStyle: {\n      maxHeight: \"350px\",\n      overflow: \"scroll\",\n    },\n  })\n);\n\nconst TodoList: React.FC<TodoListProps> = () => {\n  const classes = useStyles();\n  const [todo, setTodo] = useState<string>(\"\");\n  const [todos, setTodos] = useState<TodoType[]>([]);\n  const [error, setError] = useState<string | null>(null);\n  const {\n    loading,\n    getData: getTodos,\n    addData,\n    updateData,\n    deleteData,\n  } = useFirebaseServices<TodoType>(\"todos\");\n\n  const getData = async () => {\n    const todosList = await getTodos();\n    setTodos([...todosList]);\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const addTodos = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setError(null);\n    if (todo.trim().length === 0) {\n      setError(\"Todo cannot be blank\");\n      return;\n    }\n    addData({ id: Date.now().toString(), todo: todo, isDone: false });\n    setTodos((preValue) => [\n      ...preValue,\n      { id: Date.now().toString(), todo: todo, isDone: false },\n    ]);\n    processNotification(\"Task added\", { body: todo });\n    setTodo(\"\");\n  };\n\n  const onTodoClick = (selectedTodo: TodoType) => {\n    const index = todos.findIndex((todo) => selectedTodo.id === todo.id);\n    todos.splice(index, 1, {\n      ...selectedTodo,\n      isDone: !selectedTodo.isDone,\n    });\n    updateData({ ...selectedTodo, isDone: !selectedTodo.isDone });\n    setTodos([...todos]);\n  };\n\n  const onDelete = (selectedTodo: TodoType) => {\n    const index = todos.findIndex((todo) => selectedTodo.id === todo.id);\n    todos.splice(index, 1);\n    setTodos([...todos]);\n    deleteData(selectedTodo);\n  };\n  return (\n    <>\n      <Header\n        title=\"Todo List\"\n        description=\"Create todo and save it in local storage\"\n      />\n      <Card className={classes.root}>\n        <CardHeader title=\"Create Todo\" />\n        <CardContent>\n          <form onSubmit={addTodos}>\n            <TextField\n              variant=\"outlined\"\n              label=\"Todo\"\n              fullWidth\n              value={todo}\n              onChange={(e) => setTodo(e.target.value)}\n              helperText={!!error ? error : \"\"}\n              error={!!error}\n            />\n          </form>\n\n          {!loading ? (\n            <List className={classes.listStyle}>\n              {todos.length > 0 &&\n                todos.map((t) => (\n                  <React.Fragment key={t.id}>\n                    <ListItem\n                      onClick={() => onTodoClick(t)}\n                      className={classes.listItem}\n                    >\n                      <ListItemText\n                        primary={t.todo}\n                        className={classnames({ [classes.doneTodo]: t.isDone })}\n                      />\n                      <ListItemSecondaryAction>\n                        <IconButton\n                          edge=\"end\"\n                          aria-label=\"delete\"\n                          onClick={() => onDelete(t)}\n                        >\n                          <DeleteIcon />\n                        </IconButton>\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                    <Divider />\n                  </React.Fragment>\n                ))}\n            </List>\n          ) : (\n            <CircularProgress />\n          )}\n        </CardContent>\n      </Card>\n    </>\n  );\n};\n\nexport default TodoList;\n"],"sourceRoot":""}