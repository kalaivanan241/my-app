{"version":3,"sources":["components/NavList/NavList.tsx","components/NavBar/NavBar.tsx","components/ServiceWorkerProvider/contect.ts","components/HandleUpdate.tsx","serviceWorkerRegistration.ts","hooks/useServiceWorker.tsx","components/ServiceWorkerProvider/ServiceWorkerProvider.tsx","utils/handleNotifications.ts","components/Header.tsx","views/TodoList/TodoList.tsx","components/BottomNav/BottomNav.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","list","width","closeButton","textAlign","position","zIndex","NavList","onClose","classes","className","role","IconButton","edge","color","aria-label","onClick","List","ListItem","button","ListItemIcon","ListItemText","primary","Divider","theme","root","flexGrow","menuButton","marginRight","spacing","title","NavBar","useState","showDrawer","setShowDrawer","AppBar","Toolbar","prevVal","Typography","variant","Drawer","open","anchor","ServiceWorkerContext","createContext","updateAvailable","HandleUpdate","useContext","showDialog","setShowDialog","useEffect","handleClose","Dialog","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","window","location","reload","autoFocus","isLocalhost","Boolean","hostname","match","register","config","navigator","URL","process","href","origin","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","useServiceWorker","timeout","React","setUpdateAvailable","setRegistration","interval","setInterval","update","clearInterval","registered","updated","message","ServiceWorkerProvider","children","context","Provider","value","processNotification","options","Notification","permission","getRegistration","reg","showNotification","requestPermission","Header","description","Helmet","name","content","createStyles","doneTodo","textDecoration","listItem","cursor","minWidth","margin","background","grey","TodoList","todo","setTodo","todos","setTodos","setError","Card","CardHeader","CardContent","onSubmit","e","preventDefault","trim","length","preValue","Date","now","toString","isDone","body","TextField","label","fullWidth","onChange","target","helperText","map","t","Fragment","selectedTodo","index","findIndex","splice","onTodoClick","classnames","ListItemSecondaryAction","onDelete","maxWidth","bottom","backgroundColor","BottomNav","setValue","Hidden","mdUp","BottomNavigation","event","newValue","showLabels","BottomNavigationAction","icon","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71548ab1.chunk.js","sourcesContent":["import {\n  Divider,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  makeStyles,\n} from \"@material-ui/core\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport React from \"react\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\n\nconst useStyles = makeStyles({\n  list: {\n    width: 250,\n  },\n  closeButton: {\n    textAlign: \"end\",\n    position: \"absolute\",\n    width: \"100%\",\n    zIndex: 1,\n  },\n});\n\ninterface NavListProps {\n  onClose: () => void;\n}\n\nconst NavList: React.FC<NavListProps> = ({ onClose }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <div className={classes.closeButton}>\n        <IconButton\n          edge=\"start\"\n          color=\"inherit\"\n          aria-label=\"close\"\n          onClick={() => onClose()}\n        >\n          <CancelIcon />\n        </IconButton>\n      </div>\n\n      <List>\n        <ListItem button key={\"Todo List\"}>\n          <ListItemIcon>\n            <InboxIcon />\n          </ListItemIcon>\n          <ListItemText primary={\"Todo List\"} />\n        </ListItem>\n      </List>\n      <Divider />\n    </div>\n  );\n};\n\nexport default NavList;\n","import {\n  AppBar,\n  Button,\n  Drawer,\n  IconButton,\n  makeStyles,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport React, { useState } from \"react\";\nimport NavList from \"../NavList/NavList\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(1),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst NavBar: React.FC = () => {\n  const classes = useStyles();\n  const [showDrawer, setShowDrawer] = useState(false);\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={() => setShowDrawer((prevVal) => !prevVal)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\">Kalai POS</Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer open={showDrawer} anchor=\"left\">\n        <NavList onClose={() => setShowDrawer((prevVal) => !prevVal)} />\n      </Drawer>\n    </>\n  );\n};\n\nexport default NavBar;\n","import { createContext } from \"react\";\n\nimport { IServiceWorkerContext } from \"./types\";\n\nexport const ServiceWorkerContext = createContext<IServiceWorkerContext>({\n  updateAvailable: false,\n});\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from \"@material-ui/core\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { ServiceWorkerContext } from \"./ServiceWorkerProvider/contect\";\n\nconst HandleUpdate: React.FC = () => {\n  const { updateAvailable } = useContext(ServiceWorkerContext);\n  const [showDialog, setShowDialog] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (updateAvailable) {\n      setShowDialog(true);\n    }\n  }, [updateAvailable]);\n\n  const handleClose = () => {\n    setShowDialog(false);\n  };\n\n  const handleLoad = () => {\n    window.location.reload();\n    setShowDialog(true);\n  };\n\n  return (\n    <Dialog\n      open={showDialog}\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {\"Use Google's location service?\"}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          Let Google help apps determine location. This means sending anonymous\n          location data to Google, even when no apps are running.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"secondary\">\n          Disagree\n        </Button>\n        <Button onClick={handleLoad} color=\"primary\" autoFocus>\n          Agree\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default HandleUpdate;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n    if (isLocalhost) {\n      // This is running on localhost. Let's check if a service worker still exists or not.\n      checkValidServiceWorker(swUrl, config);\n\n      // Add some additional logging to localhost, pointing developers to the\n      // service worker/PWA documentation.\n      navigator.serviceWorker.ready.then(() => {\n        console.log(\n          \"This web app is being served cache-first by a service \" +\n            \"worker. To learn more, visit https://cra.link/PWA\"\n        );\n      });\n    } else {\n      // Is not localhost. Just register service worker\n      registerValidSW(swUrl, config);\n    }\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { register, unregister } from \"../serviceWorkerRegistration\";\n\nconst useServiceWorker = ({ timeout = 1000 }) => {\n  const [updateAvailable, setUpdateAvailable] = React.useState<boolean>(false);\n  const [registration, setRegistration] =\n    React.useState<ServiceWorkerRegistration | null>(null);\n  React.useEffect(() => {\n    const interval: number = window.setInterval(() => {\n      if (registration) {\n        registration.update();\n      }\n    }, timeout);\n    return () => clearInterval(interval);\n  }, [registration]);\n\n  const registered = (registration: ServiceWorkerRegistration) => {\n    setRegistration(registration);\n  };\n  const updated = () => {\n    setUpdateAvailable(true);\n  };\n\n  React.useEffect(() => {\n    register({ onSuccess: registered, onUpdate: updated });\n    return () => unregister();\n  }, []);\n\n  return { updateAvailable };\n};\n\nexport default useServiceWorker;\n","import React from \"react\";\nimport useServiceWorker from \"../../hooks/useServiceWorker\";\nimport { ServiceWorkerContext } from \"./contect\";\n\nconst ServiceWorkerProvider: React.FC = ({ children }) => {\n  const context = useServiceWorker({ timeout: 1000 });\n  return (\n    <ServiceWorkerContext.Provider value={context}>\n      {children}\n    </ServiceWorkerContext.Provider>\n  );\n};\n\nexport default ServiceWorkerProvider;\n","const processNotification = (title: string, options: NotificationOptions) => {\n  if (Notification.permission === \"granted\") {\n    navigator.serviceWorker.getRegistration().then(function (reg) {\n      reg?.showNotification(title, options);\n    });\n  } else if (Notification.permission === \"denied\") {\n    /* the user has previously denied push. Can't reprompt. */\n  } else {\n    Notification.requestPermission(function (status) {\n      console.log(\"Notification permission status:\", status);\n    });\n  }\n};\n\nexport default processNotification;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nexport interface HeaderProps {\n  title: string;\n  description?: string;\n}\n\nconst Header: React.FC<HeaderProps> = ({ title, description }) => {\n  return (\n    <Helmet>\n      <title>{title}</title>\n      {!!description && <meta name=\"description\" content={description} />}\n    </Helmet>\n  );\n};\n\nexport default Header;\n","import {\n  Card,\n  CardContent,\n  CardHeader,\n  createStyles,\n  Divider,\n  IconButton,\n  List,\n  ListItem,\n  ListItemSecondaryAction,\n  ListItemText,\n  makeStyles,\n  TextField,\n  Theme,\n} from \"@material-ui/core\";\nimport { grey } from \"@material-ui/core/colors\";\nimport React, { useState } from \"react\";\nimport Header from \"../../components/Header\";\nimport classnames from \"classnames\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport processNotification from \"../../utils/handleNotifications\";\n\nexport interface TodoListProps {}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    doneTodo: {\n      textDecoration: \"line-through\",\n    },\n    listItem: {\n      cursor: \"pointer\",\n    },\n    root: {\n      minWidth: 345,\n      width: \"30%\",\n      margin: \"10rem auto\",\n      background: grey[200],\n    },\n  })\n);\n\ntype TodoType = {\n  id: string;\n  todo: string;\n  isDone: boolean;\n};\n\nconst TodoList: React.FC<TodoListProps> = () => {\n  const classes = useStyles();\n  const [todo, setTodo] = useState<string>(\"\");\n  const [todos, setTodos] = useState<TodoType[]>([]);\n  const [error, setError] = useState<string | null>(null);\n\n  const addTodos = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setError(null);\n    if (todo.trim().length === 0) {\n      setError(\"Todo cannot be blank\");\n      return;\n    }\n    setTodos((preValue) => [\n      ...preValue,\n      { id: Date.now().toString(), todo: todo, isDone: false },\n    ]);\n    processNotification(\"Task added\", { body: todo });\n    setTodo(\"\");\n  };\n\n  const onTodoClick = (selectedTodo: TodoType) => {\n    const index = todos.findIndex((todo) => selectedTodo.id === todo.id);\n    todos.splice(index, 1, {\n      ...selectedTodo,\n      isDone: !selectedTodo.isDone,\n    });\n    setTodos([...todos]);\n  };\n\n  const onDelete = (selectedTodo: TodoType) => {\n    const index = todos.findIndex((todo) => selectedTodo.id === todo.id);\n    todos.splice(index, 1);\n    setTodos([...todos]);\n  };\n  return (\n    <>\n      <Header\n        title=\"Todo List\"\n        description=\"Create todo and save it in local storage\"\n      />\n      <Card className={classes.root}>\n        <CardHeader title=\"Create Todo\" />\n        <CardContent>\n          <form onSubmit={addTodos}>\n            <TextField\n              variant=\"outlined\"\n              label=\"Todo\"\n              fullWidth\n              value={todo}\n              onChange={(e) => setTodo(e.target.value)}\n              helperText={!!error ? error : \"\"}\n              error={!!error}\n            />\n          </form>\n          <List>\n            {todos.map((t) => (\n              <React.Fragment key={t.id}>\n                <ListItem\n                  onClick={() => onTodoClick(t)}\n                  className={classes.listItem}\n                >\n                  <ListItemText\n                    primary={t.todo}\n                    className={classnames({ [classes.doneTodo]: t.isDone })}\n                  />\n                  <ListItemSecondaryAction>\n                    <IconButton\n                      edge=\"end\"\n                      aria-label=\"delete\"\n                      onClick={() => onDelete(t)}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n                <Divider />\n              </React.Fragment>\n            ))}\n          </List>\n        </CardContent>\n      </Card>\n    </>\n  );\n};\n\nexport default TodoList;\n","import {\n  BottomNavigation,\n  BottomNavigationAction,\n  Hidden,\n  makeStyles,\n} from \"@material-ui/core\";\nimport RestoreIcon from \"@material-ui/icons/Restore\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\nimport React from \"react\";\nimport { grey } from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 500,\n    width: \"100%\",\n    position: \"absolute\",\n    bottom: 0,\n    backgroundColor: grey[200],\n  },\n});\n\nconst BottomNav = () => {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n  return (\n    <Hidden mdUp>\n      <BottomNavigation\n        value={value}\n        onChange={(event, newValue) => {\n          setValue(newValue);\n        }}\n        showLabels\n        className={classes.root}\n      >\n        <BottomNavigationAction label=\"Recents\" icon={<RestoreIcon />} />\n        <BottomNavigationAction label=\"Favorites\" icon={<FavoriteIcon />} />\n        <BottomNavigationAction label=\"Nearby\" icon={<LocationOnIcon />} />\n      </BottomNavigation>\n    </Hidden>\n  );\n};\n\nexport default BottomNav;\n","import {\n  BottomNavigation,\n  Button,\n  Hidden,\n  LinearProgress,\n  Paper,\n} from \"@material-ui/core\";\nimport React, { Suspense, useEffect } from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/NavBar/NavBar\";\nimport HandleUpdate from \"./components/HandleUpdate\";\nimport ServiceWorkerProvider from \"./components/ServiceWorkerProvider/ServiceWorkerProvider\";\nimport processNotification from \"./utils/handleNotifications\";\nimport TodoList from \"./views/TodoList/TodoList\";\nimport BottomNav from \"./components/BottomNav/BottomNav\";\n\n// const TodoListComponent = React.lazy(() => import(\"./views/TodoList/TodoList\"));\n\nconst App: React.FC = () => {\n  const buttonClick = () => {\n    processNotification(\"Notification Success\", {\n      body: \"Here is a notification body\",\n    });\n  };\n  return (\n    <div className=\"App\">\n      <ServiceWorkerProvider>\n        <NavBar />\n        <TodoList />\n        <HandleUpdate />\n        <BottomNav />\n      </ServiceWorkerProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// serviceWorkerRegistration.register();\n\nreportWebVitals();\n"],"sourceRoot":""}