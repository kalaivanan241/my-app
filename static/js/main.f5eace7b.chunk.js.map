{"version":3,"sources":["components/ServiceWorkerProvider/contect.ts","components/HandleUpdate.tsx","serviceWorkerRegistration.ts","hooks/useServiceWorker.tsx","components/ServiceWorkerProvider/ServiceWorkerProvider.tsx","utils/handleNotifications.ts","components/Header.tsx","views/TodoList/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ServiceWorkerContext","createContext","updateAvailable","HandleUpdate","useContext","useState","showDialog","setShowDialog","useEffect","console","log","handleClose","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onClick","color","window","location","reload","autoFocus","isLocalhost","Boolean","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","registerValidSW","catch","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","useServiceWorker","timeout","React","setUpdateAvailable","setRegistration","interval","setInterval","update","clearInterval","registered","updated","message","ServiceWorkerProvider","children","context","Provider","value","processNotification","title","options","Notification","permission","getRegistration","reg","showNotification","requestPermission","Header","description","Helmet","name","content","useStyles","makeStyles","theme","createStyles","doneTodo","textDecoration","listItem","cursor","root","minWidth","width","margin","background","grey","TodoList","classes","todo","setTodo","todos","setTodos","setError","Card","className","CardHeader","CardContent","onSubmit","e","preventDefault","trim","length","preValue","Date","now","toString","isDone","body","TextField","variant","label","fullWidth","onChange","target","helperText","List","map","t","Fragment","ListItem","selectedTodo","index","findIndex","splice","onTodoClick","ListItemText","primary","classnames","ListItemSecondaryAction","IconButton","edge","aria-label","onDelete","Divider","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5eace7b.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nimport { IServiceWorkerContext } from \"./types\";\n\nexport const ServiceWorkerContext = createContext<IServiceWorkerContext>({\n  updateAvailable: false,\n});\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from \"@material-ui/core\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { ServiceWorkerContext } from \"./ServiceWorkerProvider/contect\";\n\nconst HandleUpdate: React.FC = () => {\n  const { updateAvailable } = useContext(ServiceWorkerContext);\n  const [showDialog, setShowDialog] = useState<boolean>(false);\n\n  useEffect(() => {\n    console.log(\"update available\", updateAvailable);\n    if (updateAvailable) {\n      console.log(\"update available2\", updateAvailable);\n      setShowDialog(true);\n    }\n  }, [updateAvailable]);\n\n  const handleClose = () => {\n    setShowDialog(false);\n  };\n\n  const handleLoad = () => {\n    window.location.reload();\n    setShowDialog(true);\n  };\n\n  return (\n    <Dialog\n      open={showDialog}\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {\"Use Google's location service?\"}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          Let Google help apps determine location. This means sending anonymous\n          location data to Google, even when no apps are running.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"secondary\">\n          Disagree\n        </Button>\n        <Button onClick={handleLoad} color=\"primary\" autoFocus>\n          Agree\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default HandleUpdate;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { register, unregister } from \"../serviceWorkerRegistration\";\n\nconst useServiceWorker = ({ timeout = 1000 }) => {\n  const [updateAvailable, setUpdateAvailable] = React.useState<boolean>(false);\n  const [registration, setRegistration] =\n    React.useState<ServiceWorkerRegistration | null>(null);\n  React.useEffect(() => {\n    const interval: number = window.setInterval(() => {\n      if (registration) {\n        console.log(\"registration available\");\n        registration.update();\n      }\n    }, timeout);\n    return () => clearInterval(interval);\n  }, [registration]);\n\n  const registered = (registration: ServiceWorkerRegistration) => {\n    setRegistration(registration);\n  };\n  const updated = () => {\n    console.log(\"update available\");\n    setUpdateAvailable(true);\n  };\n\n  React.useEffect(() => {\n    register({ onSuccess: registered, onUpdate: updated });\n    return () => unregister();\n  }, []);\n\n  return { updateAvailable };\n};\n\nexport default useServiceWorker;\n","import React from \"react\";\nimport useServiceWorker from \"../../hooks/useServiceWorker\";\nimport { ServiceWorkerContext } from \"./contect\";\n\nconst ServiceWorkerProvider: React.FC = ({ children }) => {\n  const context = useServiceWorker({ timeout: 1000 });\n  return (\n    <ServiceWorkerContext.Provider value={context}>\n      {children}\n    </ServiceWorkerContext.Provider>\n  );\n};\n\nexport default ServiceWorkerProvider;\n","const processNotification = (title: string, options: NotificationOptions) => {\n  if (Notification.permission === \"granted\") {\n    console.log(\"before callback\");\n    navigator.serviceWorker.getRegistration().then(function (reg) {\n      console.log(\"handle notification\");\n      reg?.showNotification(title, options);\n    });\n  } else if (Notification.permission === \"denied\") {\n    /* the user has previously denied push. Can't reprompt. */\n  } else {\n    Notification.requestPermission(function (status) {\n      console.log(\"Notification permission status:\", status);\n    });\n  }\n};\n\nexport default processNotification;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nexport interface HeaderProps {\n  title: string;\n  description?: string;\n}\n\nconst Header: React.FC<HeaderProps> = ({ title, description }) => {\n  return (\n    <Helmet>\n      <title>{title}</title>\n      {!!description && <meta name=\"description\" content={description} />}\n    </Helmet>\n  );\n};\n\nexport default Header;\n","import {\n  Card,\n  CardContent,\n  CardHeader,\n  createStyles,\n  Divider,\n  IconButton,\n  List,\n  ListItem,\n  ListItemSecondaryAction,\n  ListItemText,\n  makeStyles,\n  TextField,\n  Theme,\n} from \"@material-ui/core\";\nimport { grey } from \"@material-ui/core/colors\";\nimport React, { useState } from \"react\";\nimport Header from \"../../components/Header\";\nimport classnames from \"classnames\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport processNotification from \"../../utils/handleNotifications\";\n\nexport interface TodoListProps {}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    doneTodo: {\n      textDecoration: \"line-through\",\n    },\n    listItem: {\n      cursor: \"pointer\",\n    },\n    root: {\n      minWidth: 345,\n      width: \"30%\",\n      margin: \"10rem auto\",\n      background: grey[200],\n    },\n  })\n);\n\ntype TodoType = {\n  id: string;\n  todo: string;\n  isDone: boolean;\n};\n\nconst TodoList: React.FC<TodoListProps> = () => {\n  const classes = useStyles();\n  const [todo, setTodo] = useState<string>(\"\");\n  const [todos, setTodos] = useState<TodoType[]>([]);\n  const [error, setError] = useState<string | null>(null);\n\n  const addTodos = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setError(null);\n    if (todo.trim().length === 0) {\n      setError(\"Todo cannot be blank\");\n      return;\n    }\n    setTodos((preValue) => [\n      ...preValue,\n      { id: Date.now().toString(), todo: todo, isDone: false },\n    ]);\n    processNotification(\"Task added\", { body: todo });\n    setTodo(\"\");\n  };\n\n  const onTodoClick = (selectedTodo: TodoType) => {\n    const index = todos.findIndex((todo) => selectedTodo.id === todo.id);\n    todos.splice(index, 1, {\n      ...selectedTodo,\n      isDone: !selectedTodo.isDone,\n    });\n    setTodos([...todos]);\n  };\n\n  const onDelete = (selectedTodo: TodoType) => {\n    const index = todos.findIndex((todo) => selectedTodo.id === todo.id);\n    todos.splice(index, 1);\n    setTodos([...todos]);\n  };\n  return (\n    <>\n      <Header\n        title=\"Todo List\"\n        description=\"Create todo and save it in local storage\"\n      />\n      <Card className={classes.root}>\n        <CardHeader title=\"Create Todo\" />\n        <CardContent>\n          <form onSubmit={addTodos}>\n            <TextField\n              variant=\"outlined\"\n              label=\"Todo\"\n              fullWidth\n              value={todo}\n              onChange={(e) => setTodo(e.target.value)}\n              helperText={!!error ? error : \"\"}\n              error={!!error}\n            />\n          </form>\n          <List>\n            {todos.map((t) => (\n              <React.Fragment key={t.id}>\n                <ListItem\n                  onClick={() => onTodoClick(t)}\n                  className={classes.listItem}\n                >\n                  <ListItemText\n                    primary={t.todo}\n                    className={classnames({ [classes.doneTodo]: t.isDone })}\n                  />\n                  <ListItemSecondaryAction>\n                    <IconButton\n                      edge=\"end\"\n                      aria-label=\"delete\"\n                      onClick={() => onDelete(t)}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n                <Divider />\n              </React.Fragment>\n            ))}\n          </List>\n        </CardContent>\n      </Card>\n    </>\n  );\n};\n\nexport default TodoList;\n","import { Button, LinearProgress } from \"@material-ui/core\";\nimport React, { Suspense, useEffect } from \"react\";\nimport \"./App.css\";\nimport HandleUpdate from \"./components/HandleUpdate\";\nimport ServiceWorkerProvider from \"./components/ServiceWorkerProvider/ServiceWorkerProvider\";\nimport processNotification from \"./utils/handleNotifications\";\nimport TodoList from \"./views/TodoList/TodoList\";\n\n// const TodoListComponent = React.lazy(() => import(\"./views/TodoList/TodoList\"));\n\nconst App: React.FC = () => {\n  const buttonClick = () => {\n    processNotification(\"Notification Success\", {\n      body: \"Here is a notification body\",\n    });\n  };\n  return (\n    <div className=\"App\">\n      <ServiceWorkerProvider>\n        <TodoList />\n        <HandleUpdate />\n        <Button onClick={buttonClick}>Notify-7</Button>\n      </ServiceWorkerProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// serviceWorkerRegistration.register();\n\nreportWebVitals();\n"],"sourceRoot":""}