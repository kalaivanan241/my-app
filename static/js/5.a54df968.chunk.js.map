{"version":3,"sources":["components/Header.tsx","utils/handleNotifications.ts","configs/db.ts","configs/firebase.ts","services/todoServices.ts","views/TodoList/TodoList.tsx"],"names":["Header","title","description","Helmet","name","content","processNotification","options","Notification","permission","navigator","serviceWorker","getRegistration","then","reg","showNotification","requestPermission","status","console","log","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","getTodos","a","collection","limit","get","todos","data","docs","map","doc","id","addTodo","todoObj","add","updateTodo","set","deleteTodo","delete","useStyles","makeStyles","theme","createStyles","doneTodo","textDecoration","listItem","cursor","root","minWidth","width","margin","background","grey","marginTop","listStyle","maxHeight","overflow","TodoList","classes","useState","todo","setTodo","setTodos","error","setError","getData","todosList","addData","updateData","deleteData","useEffect","Card","className","CardHeader","CardContent","onSubmit","e","preventDefault","trim","length","Date","now","toString","isDone","preValue","body","TextField","variant","label","fullWidth","value","onChange","target","helperText","List","t","Fragment","ListItem","onClick","selectedTodo","index","findIndex","splice","onTodoClick","ListItemText","primary","classnames","ListItemSecondaryAction","IconButton","edge","aria-label","onDelete","Divider"],"mappings":"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","file":"static/js/5.a54df968.chunk.js","sourcesContent":["import React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nexport interface HeaderProps {\n  title: string;\n  description?: string;\n}\n\nconst Header: React.FC<HeaderProps> = ({ title, description }) => {\n  return (\n    <Helmet>\n      <title>{title}</title>\n      {!!description && <meta name=\"description\" content={description} />}\n    </Helmet>\n  );\n};\n\nexport default Header;\n","const processNotification = (title: string, options: NotificationOptions) => {\n  if (Notification.permission === \"granted\") {\n    navigator.serviceWorker.getRegistration().then(function (reg) {\n      reg?.showNotification(title, options);\n    });\n  } else if (Notification.permission === \"denied\") {\n    /* the user has previously denied push. Can't reprompt. */\n  } else {\n    Notification.requestPermission(function (status) {\n      console.log(\"Notification permission status:\", status);\n    });\n  }\n};\n\nexport default processNotification;\n","import firebase from \"firebase\";\nimport { firebaseConfig } from \"./firebase\";\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const db = firebase?.firestore();\n","export const firebaseConfig = {\n  apiKey: \"AIzaSyC-tzfeKC1QSFSZbyAcgNxw7nNa5Bqm0Zs\",\n  authDomain: \"my-pwa-ab0ee.firebaseapp.com\",\n  projectId: \"my-pwa-ab0ee\",\n  storageBucket: \"my-pwa-ab0ee.appspot.com\",\n  messagingSenderId: \"726616032493\",\n  appId: \"1:726616032493:web:789aec950bde86366ab8e4\",\n  measurementId: \"G-4V4DXTD4MX\",\n};\n","import { db } from \"../configs/db\";\nimport { TodoType } from \"../views/TodoList/types\";\n\nexport const getTodos = async () => {\n  const todos = await db.collection(\"todos\").limit(50).get();\n  const data: any[] = todos.docs.map((doc) => ({ ...doc.data(), id: doc.id }));\n  return data;\n};\n\nexport const addTodo = async (todoObj: TodoType) => {\n  const data = await db.collection(\"todos\").add({\n    ...todoObj,\n  });\n  return { ...data, id: data.id };\n};\n\nexport const updateTodo = async (todoObj: TodoType) => {\n  await db\n    .collection(\"todos\")\n    .doc(todoObj.id)\n    .set({\n      ...todoObj,\n    });\n};\n\nexport const deleteTodo = async (todoObj: TodoType) => {\n  await db.collection(\"todos\").doc(todoObj.id).delete();\n};\n","import {\n  Card,\n  CardContent,\n  CardHeader,\n  createStyles,\n  Divider,\n  Fab,\n  IconButton,\n  List,\n  ListItem,\n  ListItemSecondaryAction,\n  ListItemText,\n  makeStyles,\n  TextField,\n  Theme,\n} from \"@material-ui/core\";\nimport { grey } from \"@material-ui/core/colors\";\nimport React, { useEffect, useState } from \"react\";\nimport Header from \"../../components/Header\";\nimport classnames from \"classnames\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport processNotification from \"../../utils/handleNotifications\";\nimport { db } from \"../../configs/db\";\nimport { TodoType } from \"./types\";\nimport {\n  addTodo,\n  deleteTodo,\n  updateTodo,\n  getTodos,\n} from \"../../services/todoServices\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\nexport interface TodoListProps {}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    doneTodo: {\n      textDecoration: \"line-through\",\n    },\n    listItem: {\n      cursor: \"pointer\",\n    },\n    root: {\n      minWidth: 345,\n      width: \"30%\",\n      margin: \"auto\",\n      background: grey[200],\n      marginTop: \"2rem\",\n    },\n    listStyle: {\n      maxHeight: \"350px\",\n      overflow: \"scroll\",\n    },\n  })\n);\n\nconst TodoList: React.FC<TodoListProps> = () => {\n  const classes = useStyles();\n  const [todo, setTodo] = useState<string>(\"\");\n  const [todos, setTodos] = useState<TodoType[]>([]);\n  const [error, setError] = useState<string | null>(null);\n\n  const getData = async () => {\n    const todosList = await getTodos();\n    setTodos([...todosList]);\n  };\n\n  const addData = async (todoObj: TodoType) => {\n    await addTodo(todoObj);\n  };\n\n  const updateData = async (todoObj: TodoType) => {\n    await updateTodo(todoObj);\n  };\n  const deleteData = async (todoObj: TodoType) => {\n    await deleteTodo(todoObj);\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const addTodos = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setError(null);\n    if (todo.trim().length === 0) {\n      setError(\"Todo cannot be blank\");\n      return;\n    }\n    addData({ id: Date.now().toString(), todo: todo, isDone: false });\n    setTodos((preValue) => [\n      ...preValue,\n      { id: Date.now().toString(), todo: todo, isDone: false },\n    ]);\n    processNotification(\"Task added\", { body: todo });\n    setTodo(\"\");\n  };\n\n  const onTodoClick = (selectedTodo: TodoType) => {\n    const index = todos.findIndex((todo) => selectedTodo.id === todo.id);\n    todos.splice(index, 1, {\n      ...selectedTodo,\n      isDone: !selectedTodo.isDone,\n    });\n    updateData({ ...selectedTodo, isDone: !selectedTodo.isDone });\n    setTodos([...todos]);\n  };\n\n  const onDelete = (selectedTodo: TodoType) => {\n    const index = todos.findIndex((todo) => selectedTodo.id === todo.id);\n    todos.splice(index, 1);\n    setTodos([...todos]);\n    deleteData(selectedTodo);\n  };\n  return (\n    <>\n      <Header\n        title=\"Todo List\"\n        description=\"Create todo and save it in local storage\"\n      />\n      <Card className={classes.root}>\n        <CardHeader title=\"Create Todo\" />\n        <CardContent>\n          <form onSubmit={addTodos}>\n            <TextField\n              variant=\"outlined\"\n              label=\"Todo\"\n              fullWidth\n              value={todo}\n              onChange={(e) => setTodo(e.target.value)}\n              helperText={!!error ? error : \"\"}\n              error={!!error}\n            />\n          </form>\n          <List className={classes.listStyle}>\n            {todos.map((t) => (\n              <React.Fragment key={t.id}>\n                <ListItem\n                  onClick={() => onTodoClick(t)}\n                  className={classes.listItem}\n                >\n                  <ListItemText\n                    primary={t.todo}\n                    className={classnames({ [classes.doneTodo]: t.isDone })}\n                  />\n                  <ListItemSecondaryAction>\n                    <IconButton\n                      edge=\"end\"\n                      aria-label=\"delete\"\n                      onClick={() => onDelete(t)}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n                <Divider />\n              </React.Fragment>\n            ))}\n          </List>\n        </CardContent>\n      </Card>\n    </>\n  );\n};\n\nexport default TodoList;\n"],"sourceRoot":""}