{"version":3,"sources":["components/NavList/NavList.tsx","components/NavBar/NavBar.tsx","components/ServiceWorkerProvider/contect.ts","components/HandleUpdate.tsx","serviceWorkerRegistration.ts","hooks/useServiceWorker.tsx","components/ServiceWorkerProvider/ServiceWorkerProvider.tsx","components/BottomNav/BottomNav.tsx","app/AppRoutes.tsx","App.tsx","reportWebVitals.ts","index.tsx","app/paths.ts"],"names":["useStyles","makeStyles","list","width","closeButton","textAlign","position","zIndex","NavList","onClose","classes","className","role","IconButton","edge","color","aria-label","onClick","List","ListItem","button","ListItemIcon","ListItemText","primary","Divider","theme","root","flexGrow","menuButton","marginRight","spacing","title","NavBar","useState","showDrawer","setShowDrawer","AppBar","Toolbar","prevVal","Typography","variant","Drawer","open","anchor","ServiceWorkerContext","createContext","updateAvailable","HandleUpdate","useContext","showDialog","setShowDialog","useEffect","handleClose","window","location","reload","Dialog","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","autoFocus","isLocalhost","Boolean","hostname","match","register","config","navigator","URL","process","href","origin","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","useServiceWorker","timeout","React","setUpdateAvailable","setRegistration","interval","setInterval","update","clearInterval","registered","updated","message","ServiceWorkerProvider","children","context","Provider","value","bottom","container","maxWidth","margin","bottomNav","backgroundColor","grey","bottomNavOptions","path","baseUrl","label","icon","todoListUrl","savingUrl","BottomNav","history","useHistory","setValue","Hidden","mdUp","BottomNavigation","onChange","event","newValue","push","showLabels","map","option","index","BottomNavigationAction","TodoListComponent","lazy","HomeComponent","SavingsComponent","AppRoutes","Box","mb","Suspense","fallback","LinearProgress","component","exact","createMuiTheme","palette","main","secondary","App","ThemeProvider","style","height","overflowY","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","savingAddUrl","savingUpdateUrl"],"mappings":"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","file":"static/js/main.d616d7db.chunk.js","sourcesContent":["import {\n  Divider,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  makeStyles,\n} from \"@material-ui/core\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport React from \"react\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\n\nconst useStyles = makeStyles({\n  list: {\n    width: 250,\n  },\n  closeButton: {\n    textAlign: \"end\",\n    position: \"absolute\",\n    width: \"100%\",\n    zIndex: 1,\n  },\n});\n\ninterface NavListProps {\n  onClose: () => void;\n}\n\nconst NavList: React.FC<NavListProps> = ({ onClose }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.list} role=\"presentation\">\n      <div className={classes.closeButton}>\n        <IconButton\n          edge=\"start\"\n          color=\"inherit\"\n          aria-label=\"close\"\n          onClick={() => onClose()}\n        >\n          <CancelIcon />\n        </IconButton>\n      </div>\n\n      <List>\n        <ListItem button key={\"Todo List\"}>\n          <ListItemIcon>\n            <InboxIcon />\n          </ListItemIcon>\n          <ListItemText primary={\"Todo List\"} />\n        </ListItem>\n      </List>\n      <Divider />\n    </div>\n  );\n};\n\nexport default NavList;\n","import {\n  AppBar,\n  Button,\n  Drawer,\n  IconButton,\n  makeStyles,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport React, { useState } from \"react\";\nimport NavList from \"../NavList/NavList\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(1),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst NavBar: React.FC = () => {\n  const classes = useStyles();\n  const [showDrawer, setShowDrawer] = useState(false);\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={() => setShowDrawer((prevVal) => !prevVal)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\">Kalai POS</Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer open={showDrawer} anchor=\"left\">\n        <NavList onClose={() => setShowDrawer((prevVal) => !prevVal)} />\n      </Drawer>\n    </>\n  );\n};\n\nexport default NavBar;\n","import { createContext } from \"react\";\n\nimport { IServiceWorkerContext } from \"./types\";\n\nexport const ServiceWorkerContext = createContext<IServiceWorkerContext>({\n  updateAvailable: false,\n});\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from \"@material-ui/core\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { ServiceWorkerContext } from \"./ServiceWorkerProvider/contect\";\n\nconst HandleUpdate: React.FC = () => {\n  const { updateAvailable } = useContext(ServiceWorkerContext);\n  const [showDialog, setShowDialog] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (updateAvailable) {\n      setShowDialog(true);\n    }\n  }, [updateAvailable]);\n\n  const handleClose = () => {\n    window.location.reload();\n    setShowDialog(false);\n  };\n\n  const handleLoad = () => {\n    window.location.reload();\n    setShowDialog(true);\n  };\n\n  return (\n    <Dialog\n      open={showDialog}\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {\"Use Google's location service?\"}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          Let Google help apps determine location. This means sending anonymous\n          location data to Google, even when no apps are running.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"secondary\">\n          Disagree\n        </Button>\n        <Button onClick={handleLoad} color=\"primary\" autoFocus>\n          Agree\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default HandleUpdate;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n    if (isLocalhost) {\n      // This is running on localhost. Let's check if a service worker still exists or not.\n      checkValidServiceWorker(swUrl, config);\n\n      // Add some additional logging to localhost, pointing developers to the\n      // service worker/PWA documentation.\n      navigator.serviceWorker.ready.then(() => {\n        console.log(\n          \"This web app is being served cache-first by a service \" +\n            \"worker. To learn more, visit https://cra.link/PWA\"\n        );\n      });\n    } else {\n      // Is not localhost. Just register service worker\n      registerValidSW(swUrl, config);\n    }\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { register, unregister } from \"../serviceWorkerRegistration\";\n\nconst useServiceWorker = ({ timeout = 1000 }) => {\n  const [updateAvailable, setUpdateAvailable] = React.useState<boolean>(false);\n  const [registration, setRegistration] =\n    React.useState<ServiceWorkerRegistration | null>(null);\n  React.useEffect(() => {\n    const interval: number = window.setInterval(() => {\n      if (registration) {\n        registration.update();\n      }\n    }, timeout);\n    return () => clearInterval(interval);\n  }, [registration]);\n\n  const registered = (registration: ServiceWorkerRegistration) => {\n    setRegistration(registration);\n  };\n  const updated = () => {\n    setUpdateAvailable(true);\n  };\n\n  React.useEffect(() => {\n    register({ onSuccess: registered, onUpdate: updated });\n    return () => unregister();\n  }, []);\n\n  return { updateAvailable };\n};\n\nexport default useServiceWorker;\n","import React from \"react\";\nimport useServiceWorker from \"../../hooks/useServiceWorker\";\nimport { ServiceWorkerContext } from \"./contect\";\n\nconst ServiceWorkerProvider: React.FC = ({ children }) => {\n  const context = useServiceWorker({ timeout: 1000 });\n  return (\n    <ServiceWorkerContext.Provider value={context}>\n      {children}\n    </ServiceWorkerContext.Provider>\n  );\n};\n\nexport default ServiceWorkerProvider;\n","import {\n  BottomNavigation,\n  BottomNavigationAction,\n  Hidden,\n  makeStyles,\n} from \"@material-ui/core\";\n\nimport ListAltIcon from \"@material-ui/icons/ListAlt\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport AccountBalanceWalletIcon from \"@material-ui/icons/AccountBalanceWallet\";\n\nimport React from \"react\";\nimport { grey } from \"@material-ui/core/colors\";\nimport { baseUrl, todoListUrl, savingUrl } from \"../../app/paths\";\nimport { useHistory } from \"react-router\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n    bottom: 0,\n    position: \"sticky\",\n  },\n  container: {\n    maxWidth: 500,\n    margin: \"auto\",\n    position: \"sticky\",\n    bottom: 0,\n  },\n  bottomNav: {\n    backgroundColor: grey[200],\n  },\n});\n\ntype BottomNavOptionType = {\n  path: string;\n  label: string;\n  icon: React.ReactNode;\n};\n\nconst bottomNavOptions: BottomNavOptionType[] = [\n  {\n    path: baseUrl,\n    label: \"Home\",\n    icon: <HomeIcon />,\n  },\n  {\n    path: todoListUrl,\n    label: \"Todo\",\n    icon: <ListAltIcon />,\n  },\n  {\n    path: savingUrl,\n    label: \"Savings\",\n    icon: <AccountBalanceWalletIcon />,\n  },\n];\n\nconst BottomNav = () => {\n  const history = useHistory();\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n  return (\n    <Hidden mdUp>\n      <div className={classes.root}>\n        <div className={classes.container}>\n          <BottomNavigation\n            value={value}\n            onChange={(event, newValue) => {\n              setValue(newValue);\n              history.push(bottomNavOptions[newValue].path);\n            }}\n            className={classes.bottomNav}\n            showLabels\n          >\n            {bottomNavOptions.map((option, index) => {\n              return (\n                <BottomNavigationAction\n                  label={option.label}\n                  icon={option.icon}\n                  key={index}\n                />\n              );\n            })}\n          </BottomNavigation>\n        </div>\n      </div>\n    </Hidden>\n  );\n};\n\nexport default BottomNav;\n","import Box from \"@material-ui/core/Box\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { baseUrl, savingUrl, todoListUrl } from \"./paths\";\nconst TodoListComponent = React.lazy(\n  () => import(\"./../views/TodoList/TodoList\")\n);\nconst HomeComponent = React.lazy(() => import(\"./../views/Home/Home\"));\nconst SavingsComponent = React.lazy(\n  () => import(\"../views/SavingsList/Savings\")\n);\n\nconst AppRoutes: React.FC = () => {\n  return (\n    <Box mb={2}>\n      <React.Suspense fallback={<LinearProgress />}>\n        <Switch>\n          <Route path={baseUrl} component={HomeComponent} exact />\n          <Route path={todoListUrl} component={TodoListComponent} />\n          <Route path={savingUrl} component={SavingsComponent} />\n        </Switch>\n      </React.Suspense>\n    </Box>\n  );\n};\n\nexport default AppRoutes;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/NavBar/NavBar\";\nimport HandleUpdate from \"./components/HandleUpdate\";\nimport ServiceWorkerProvider from \"./components/ServiceWorkerProvider/ServiceWorkerProvider\";\nimport BottomNav from \"./components/BottomNav/BottomNav\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport AppRoutes from \"./app/AppRoutes\";\n\nimport { db } from \"./configs/db\";\nimport ThemeProvider from \"@material-ui/styles/ThemeProvider\";\nimport { createMuiTheme } from \"@material-ui/core\";\nimport { red, yellow } from \"@material-ui/core/colors\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#042A2B\",\n    },\n    secondary: {\n      main: \"#5EB1BF\",\n    },\n  },\n});\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <ServiceWorkerProvider>\n          <Router>\n            <NavBar />\n            <div style={{ height: \"calc(100vh - 114px)\", overflowY: \"scroll\" }}>\n              <AppRoutes />\n            </div>\n            <HandleUpdate />\n            <BottomNav />\n          </Router>\n        </ServiceWorkerProvider>\n      </ThemeProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// serviceWorkerRegistration.register();\n\nreportWebVitals();\n","export const baseUrl = \"/my-app\";\nexport const todoListUrl = baseUrl + \"/todo\";\nexport const savingUrl = baseUrl + \"/savings\";\nexport const savingAddUrl = savingUrl + \"/add\";\nexport const savingUpdateUrl = savingUrl + \"/update\";\n"],"sourceRoot":""}