{"version":3,"sources":["utils/handleNotifications.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["processNotification","title","options","Notification","permission","console","log","navigator","serviceWorker","getRegistration","then","reg","showNotification","requestPermission","status","TodoListComponent","React","lazy","App","className","fallback","LinearProgress","Button","onClick","body","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"yHAgBeA,IAhBa,SAACC,EAAeC,GACV,YAA5BC,aAAaC,YACfC,QAAQC,IAAI,mBACZC,UAAUC,cAAcC,kBAAkBC,MAAK,SAAUC,GACvDN,QAAQC,IAAI,uBACT,OAAHK,QAAG,IAAHA,KAAKC,iBAAiBX,EAAOC,OAEM,WAA5BC,aAAaC,YAGtBD,aAAaU,mBAAkB,SAAUC,GACvCT,QAAQC,IAAI,kCAAmCQ,Q,qKCN/CC,EAAoBC,IAAMC,MAAK,kBAAM,uDAkB5BC,EAhBO,WAMpB,OACE,qBAAKC,UAAU,MAAf,SACE,eAAC,WAAD,CAAUC,SAAU,cAACC,EAAA,EAAD,IAApB,UACE,cAACN,EAAD,IACA,cAACO,EAAA,EAAD,CAAQC,QATM,WAClBvB,YAAoB,uBAAwB,CAC1CwB,KAAM,iCAOJ,uCCLFC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DA0CnC,SAASC,EAAgBC,EAAeC,GACtC1B,UAAUC,cACP0B,SAASF,GACTtB,MAAK,SAACyB,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfjC,UAAUC,cAAciC,YAI1BpC,QAAQC,IACN,+GAKE2B,GAAUA,EAAOS,UACnBT,EAAOS,SAASP,KAMlB9B,QAAQC,IAAI,sCAGR2B,GAAUA,EAAOU,WACnBV,EAAOU,UAAUR,WAO5BS,OAAM,SAACC,GACNxC,QAAQwC,MAAM,4CAA6CA,MCjGjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFcnB,SAAkBzB,GACvB,GAA6C,kBAAmB1B,UAAW,CAGzE,GADkB,IAAIoD,IAAIC,UAAwBjC,OAAOC,SAASiC,MACpDC,SAAWnC,OAAOC,SAASkC,OAIvC,OAGFnC,OAAOoC,iBAAiB,QAAQ,WAC9B,IAAM/B,EAAK,UAAM4B,UAAN,sBAEPnC,IAgEV,SAAiCO,EAAeC,GAE9C+B,MAAMhC,EAAO,CACXiC,QAAS,CAAE,iBAAkB,YAE5BvD,MAAK,SAACwD,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASpD,QACO,MAAfqD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C9D,UAAUC,cAAc8D,MAAM5D,MAAK,SAACyB,GAClCA,EAAaoC,aAAa7D,MAAK,WAC7BiB,OAAOC,SAAS4C,eAKpBzC,EAAgBC,EAAOC,MAG1BW,OAAM,WACLvC,QAAQC,IAAI,oEAtFVmE,CAAwBzC,EAAOC,GAI/B1B,UAAUC,cAAc8D,MAAM5D,MAAK,WACjCL,QAAQC,IACN,+GAMJyB,EAAgBC,EAAOC,OEpC/ByC,GAKA5B,M","file":"static/js/main.c484d648.chunk.js","sourcesContent":["const processNotification = (title: string, options: NotificationOptions) => {\n  if (Notification.permission === \"granted\") {\n    console.log(\"before callback\");\n    navigator.serviceWorker.getRegistration().then(function (reg) {\n      console.log(\"handle notification\");\n      reg?.showNotification(title, options);\n    });\n  } else if (Notification.permission === \"denied\") {\n    /* the user has previously denied push. Can't reprompt. */\n  } else {\n    Notification.requestPermission(function (status) {\n      console.log(\"Notification permission status:\", status);\n    });\n  }\n};\n\nexport default processNotification;\n","import { Button, LinearProgress } from \"@material-ui/core\";\nimport React, { Suspense, useEffect } from \"react\";\nimport \"./App.css\";\nimport processNotification from \"./utils/handleNotifications\";\n\nconst TodoListComponent = React.lazy(() => import(\"./views/TodoList/TodoList\"));\n\nconst App: React.FC = () => {\n  const buttonClick = () => {\n    processNotification(\"Notification Success\", {\n      body: \"Here is a notification body\",\n    });\n  };\n  return (\n    <div className=\"App\">\n      <Suspense fallback={<LinearProgress />}>\n        <TodoListComponent />\n        <Button onClick={buttonClick}>Handle Notification</Button>\n      </Suspense>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}